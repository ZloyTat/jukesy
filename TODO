
- hijack <a> tags w/js for pushstate
- js placeholder

- make app.boot synchronous if possible:
  synchronous startup would eliminate race conditions
- convert any current text in the app to i18n bullshit
- twitter bootstrap for some design stuff?

rename users/create POST to just /users POST

playlist
  re-index slug to user-slug combined key

index
  playlists.find(user: req.param.user)
    res.send playlists.json
show
  playlists.find(user, slug)
    res.send playlist.longjson()
create
  if req.session.user.name != req.param.user
    return next(new errors.Unauthorized)
  Playlist.create( user: req.session.user, name, tracks )
    if e return next e
    res.send playlist.json
update (put)
  if req.session.user.name != req.param.user
    return next unauthorizederror
  // or Playlist.update( {user,slug}, {name,tracks}, not multi, ?)
  Playlist.find(user, slug)
    if e return next error
    playlist.save
      if e return next error
      res.send playlist.json
delete
  if req.session.user.name != req.param.user
    return next unauthorizederror
  Playlist.find(user, slug)
    if e return next error
    playlist.delete
      if e return next error
      res.send success

- restful api
  GET  /playlists           # index
    - lists playlists for a user (just name, slug)
      - create two playlists under a user, check index for them
  POST /playlists           # create
    - requires auth
    - accepts name, tracks
    - returns name, slug, tracks
  GET  /playlists/fuck-you  # show (cache)
    - returns name, slug???, tracks, user info (avatar hopefully)
  PUT  /playlists/fuck-you  # update
    - requires auth
    - accepts name, tracks (in case the name changes)
    - returns name, slug, tracks
  DEL  /playlists/fuck-you  # delete
    - requires auth
    - returns success or fail... (200 or not)


- slugs
  - finish up slugger, make it capable of looking up a slug on a model

- playlist creation
  - should be able to 'authenticate' with your username and password
  - /users/adrian/playlists/create
    username=adrian,password=pw,name=disco songs,tracks={...}
    tries parsing the json (make lib that wraps json.parse w/try-catch)
    tries saving the playlist
    returns playlist.quickinfo
      (rename user.json user.quickinfo)
  - /user/adrian/playlists (index)
  - /user/adrian/playlists/slug-of-a-playlist (show)
  - /user/adrian/playlists/slug-of-a-playlist (delete)
  - /user/adrian/playlists/slug-of-a-playlist (post/put)

what should work
  - i can log in
  - log out
    - test that the logout path is reachable
    - it should just do session.destroy
    - it should redirect to /
  - reset password
    - requires email integration
  - playlist models + creation
  - blacklist slugs
    - user => playlists
  - cannot create / edit another user's playlist
  - can create / edit my own
  - data migration
  - scrobbling
  - migration for old users
  - migrations for old playlists
  - forgot password routes

nice-to-have
  - make startup entirely synchronous
  - error when loading and mongodb is not up
  - documentation
    - info on indexes (user.email, user._username_i, playlist.userid, playlist.slug)
    - info on setup / deploy

---- Authentication

- /logout (used as an actual link from the app)
  - if a session cookie is present, delete it
  - redirect to /

---- Confirmation

- add confirm route for users
- on an initial save, send an email with details for confirming account
- unconfirmed accounts can still sign in and do shit, just can't reset password and are always warned on their show page

